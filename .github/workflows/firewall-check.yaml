name: GCP Firewall Check

on:
  workflow_dispatch:  # Allows manual trigger

jobs:
  check-firewall:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_SATYA }}  # Webhook URL as secret
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_STAGE }}  # Set project ID from secrets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_STAGE }}

      - name: Setting up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_STAGE }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Authenticate kubectl
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID_STAGE }}
          gcloud container clusters get-credentials venu-stage-k8s-01 --zone=us-east4 --project ${{ secrets.GCP_PROJECT_ID_STAGE }}

      - name: Check GCP Firewall Rules for Publicly Open Ports
        run: |
          # Fetch all firewall rules
          echo "Fetching firewall rules for project: $GCP_PROJECT_ID..."
          firewall_rules=$(gcloud compute firewall-rules list --format="json") || { echo "Unable to fetch firewall rules." ; exit 1; }

          # Filter rules that allow 0.0.0.0/0 access and have open ports
          echo "Checking for publicly open ports..."
          open_ports=0
          alert_message="ðŸš¨ *GCP Firewall Alert*: Publicly open firewall ports found for project $GCP_PROJECT_ID:\n\n"

          # Function to decode base64 and parse JSON
          _jq() {
              echo "${1}" | base64 --decode | jq -r "${2}"
          }

          # Iterate over each rule
          for rule in $(echo "$firewall_rules" | jq -r '.[] | @base64'); do
              allowed_ip_ranges=$(_jq "$rule" '.sourceRanges[]' 2>/dev/null)
              if echo "$allowed_ip_ranges" | grep -q "0.0.0.0/0"; then
                  rule_name=$(_jq "$rule" '.name')
                  rule_description=$(_jq "$rule" '.description' 2>/dev/null || echo "(No description provided)")
                  allowed_ports=$(_jq "$rule" '.allowed[].ports[]' 2>/dev/null || echo "No ports defined")

                  # Append rule details to the alert message with an extra newline for separation
                  alert_message+="*Rule:* $rule_name\n"
                  alert_message+="*Open Ports:* $allowed_ports\n"
                  alert_message+="*Description:* $rule_description\n\n---\n\n"
                  open_ports=1
              fi
          done

          # Final check
          if [ "$open_ports" -eq 0 ]; then
              echo "No publicly open ports found."
              echo "insecure_rules=0" >> $GITHUB_ENV
              alert_message="âœ… No publicly open firewall ports were found for project $GCP_PROJECT_ID."
          else
              echo "Publicly open ports found."
              echo "insecure_rules=1" >> $GITHUB_ENV
          fi

          # Save the alert message for later steps
          echo "$alert_message" > alert_message.txt

      - name: Send Slack Alert if insecure rules are found
        if: env.insecure_rules != '0'
        run: |
          # Debugging: Print the raw alert message
          echo "Raw alert message:"
          cat alert_message.txt

          # Escape newlines and quotes in the alert message for JSON
          sanitized_message=$(cat alert_message.txt | jq -R -s . | jq 'gsub("\n"; "\\n")')
          
          # Create the final JSON payload
          json_payload="{\"text\": $sanitized_message}"

          # Debugging: Print the JSON payload
          echo "JSON payload to be sent to Slack:"
          echo "$json_payload"

          # Send the alert to Slack
          response=$(curl -X POST -H "Content-type: application/json" --data "$json_payload" ${{ secrets.SLACK_WEBHOOK_URL_SATYA }} -w "%{http_code}" -s -o /dev/null)
          echo "Response from Slack: $response"  # Debugging: Check response status
