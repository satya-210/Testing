name: GCP Firewall Check

on:
  workflow_dispatch:  # Allows manual trigger

jobs:
  check-firewall:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_SATYA }}  # Webhook URL as secret
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_STAGE }}  # Set project ID from secrets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_STAGE }}

      - name: Setting up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_STAGE }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Authenticate kubectl
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID_STAGE }}
          gcloud container clusters get-credentials venu-stage-k8s-01 --zone=us-east4 --project ${{ secrets.GCP_PROJECT_ID_STAGE }}

      # Firewall rule check section
      - name: Check GCP Firewall Rules for Publicly Open Ports
        run: |
          # Fetch all firewall rules
          echo "Fetching firewall rules for project: $GCP_PROJECT_ID..."
          firewall_rules=$(gcloud compute firewall-rules list --format="json") || { echo "Unable to fetch firewall rules." ; exit 1; }

          # Filter rules that allow 0.0.0.0/0 access and have open ports
          echo "Checking for publicly open ports..."
          open_ports=0

          # Iterate over each rule
          for rule in $(echo "$firewall_rules" | jq -r '.[] | @base64'); do
              _jq() {
                  echo "${rule}" | base64 --decode | jq -r "${1}"
              }

              # Check if the rule allows public access (0.0.0.0/0)
              allowed_ip_ranges=$(_jq '.sourceRanges[]')
              if echo "$allowed_ip_ranges" | grep -q "0.0.0.0/0"; then
                  rule_name=$(_jq '.name')
                  rule_description=$(_jq '.description' 2>/dev/null)  # Get description
                  allowed_ports=$(_jq '.allowed[].ports[]' 2>/dev/null)

                  # If ports are allowed, print the rule, description, and the ports
                  if [ ! -z "$allowed_ports" ]; then
                      echo "Rule '$rule_name' allows public access to ports: $allowed_ports"
                      if [ ! -z "$rule_description" ]; then
                          echo "Description: $rule_description"
                      else
                          echo "Description: No description provided"
                      fi
                      open_ports=1
                  fi
              fi
          done

          # Final check
          if [ "$open_ports" -eq 0 ]; then
              echo "No publicly open ports found."
              echo "insecure_rules=0" >> $GITHUB_ENV
          else
              echo "Publicly open ports found."
              echo "insecure_rules=1" >> $GITHUB_ENV
          fi

      - name: Send Slack Alert if insecure rules are found
        if: env.insecure_rules != '0'
        run: |
          # Send Slack alert if publicly open ports were found
          curl -X POST -H "Content-type: application/json" --data "{\"text\": \"ðŸš¨ *GCP Firewall Alert*: Publicly open firewall ports found for project $GCP_PROJECT_ID. Please review your firewall settings.\"}" ${{ secrets.SLACK_WEBHOOK_URL_SATYA }}
