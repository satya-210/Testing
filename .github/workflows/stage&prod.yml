name: GCP Gateway Certificate Expiration Check and Send Slack Alerts
on:
  schedule:
    - cron: '30 13 * * 1'  # Runs every Monday at 7 PM IST (1:30 PM UTC)
  workflow_dispatch:     # Allows manual triggering of the workflow
jobs:
  GCP-Gateway-Certificate-Expiration-Check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [stage, prod]
    env:
      EXPIRY_THRESHOLD_DAYS: 30  # Set the expiry threshold to 30 days
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set environment variables based on matrix
        run: |
          if [[ "${{ matrix.environment }}" == "stage" ]]; then
            echo "Setting environment variables for stage..."
            echo "GCP_GATEWAY_CERTIFICATE_NAME=stage-gateway" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_STAGE }}" >> $GITHUB_ENV
            echo "K8S_CLUSTER_NAME=venu-stage-k8s-01" >> $GITHUB_ENV
            echo "K8S_ZONE=us-east4" >> $GITHUB_ENV
          elif [[ "${{ matrix.environment }}" == "prod" ]]; then
            echo "Setting environment variables for prod..."
            echo "GCP_GATEWAY_CERTIFICATE_NAME=gateway-certs" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PROD }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_ENV
            echo "K8S_CLUSTER_NAME=venu-prod-k8s" >> $GITHUB_ENV
            echo "K8S_ZONE=us-east4" >> $GITHUB_ENV
          fi
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ matrix.environment == 'stage' && secrets.GCP_SERVICE_ACCOUNT_KEY_STAGE || secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}
      - name: Setting up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
      - name: Authenticate kubectl
        run: |
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
          gcloud container clusters get-credentials ${{ env.K8S_CLUSTER_NAME }} --zone=${{ env.K8S_ZONE }} --project=${{ env.GCP_PROJECT_ID }}
      - name: Check GCP Gateway Certificate Expiry
        run: |
          certificate_name="${{ env.GCP_GATEWAY_CERTIFICATE_NAME }}"
          project_id="${{ env.GCP_PROJECT_ID }}"
          # Fetch expiry and DNS names for the certificate
          expiry_date=$(gcloud compute ssl-certificates describe "$certificate_name" --global --format="value(expireTime)")
          dns=$(gcloud compute ssl-certificates describe "$certificate_name" --global --format="value(subjectAlternativeNames)")
          if [ -z "$expiry_date" ]; then
            echo "Error: Failed to fetch certificate details for $certificate_name."
            exit 1
          fi
          expiry_date_epoch=$(date -d "$expiry_date" +%s)
          current_date_epoch=$(date +%s)
          days_until_expiry=$(( (expiry_date_epoch - current_date_epoch) / 86400 ))
          expiry_threshold=${{ env.EXPIRY_THRESHOLD_DAYS }}
          if [[ $days_until_expiry -le $expiry_threshold ]]; then
            echo "*Certificate Name*: $certificate_name" > certificate_expiry_alert_${{ matrix.environment }}.txt
            echo "*DNS Names*: $dns" >> certificate_expiry_alert_${{ matrix.environment }}.txt
            echo "*Expiry Date*: $expiry_date" >> certificate_expiry_alert_${{ matrix.environment }}.txt
            echo "*Days Until Expiry*: $days_until_expiry" >> certificate_expiry_alert_${{ matrix.environment }}.txt
          else
            echo "Certificate is still valid for $days_until_expiry days."
          fi
      - name: Send Slack Alert
        run: |
          if [ -f certificate_expiry_alert_${{ matrix.environment }}.txt ]; then
            message=$(cat certificate_expiry_alert_${{ matrix.environment }}.txt)
            curl -X POST -H 'Content-type: application/json' --data "{
              'text': 'GCP_GATEWAY_CERTIFICATE_EXPIRY_ALERT (${{ matrix.environment }}):\n\n$message'
            }" "${{ env.SLACK_WEBHOOK_URL }}"
          else
            echo "No alert to send for ${{ matrix.environment }}."
          fi
       # Send alert to Slack on job failure
      - name: Send alert to Slack on job failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{
            'text': 'GCP_GATEWAY_CERTIFICATE_EXPIRY_ALERT:\n\nThe workflow for ${{ matrix.environment }} failed.'
          }" "${{ env.SLACK_WEBHOOK_URL }}"
